server.port=8080
spring.application.name=sharding-jdbc

# ָ���ֿ�ֱ�����Դ��ǩ
spring.shardingsphere.datasource.names=ds0,ds1
# sharding jdbc ����Դ
spring.shardingsphere.datasource.ds0.type=com.zaxxer.hikari.HikariDataSource
spring.shardingsphere.datasource.ds0.driver-class-name=com.mysql.jdbc.Driver
spring.shardingsphere.datasource.ds0.jdbc-url=jdbc:mysql://172.18.231.40:8066/jcf3?useUnicode=true&characterEncoding=utf-8&useSSL=true
spring.shardingsphere.datasource.ds0.username=ijcf
spring.shardingsphere.datasource.ds0.password=ijcf

spring.shardingsphere.datasource.ds1.type=com.zaxxer.hikari.HikariDataSource
spring.shardingsphere.datasource.ds1.driver-class-name=com.mysql.jdbc.Driver
spring.shardingsphere.datasource.ds1.jdbc-url=jdbc:mysql://localhost:3306/jcf3?useUnicode=true&characterEncoding=utf-8&useSSL=true&serverTimezone=UTC
spring.shardingsphere.datasource.ds1.username=root
spring.shardingsphere.datasource.ds1.password=root

# ָ���ֿ��Ƭ�ֶ� ��ƷID ȡģ
spring.shardingsphere.sharding.default-database-strategy.inline.sharding-column=product_id
spring.shardingsphere.sharding.default-database-strategy.inline.algorithm-expression=ds$->{Math.abs(product_id.hashCode())%2}

# ָ��ʵ�����ݽڵ� ds0.product_1,ds0.product_2 ds1.product_1,ds1.product_2
spring.shardingsphere.sharding.tables.t_order.actual-data-nodes=ds$->{0..1}.t_order_$->{1..2}

# inline ���ʽ
spring.shardingsphere.sharding.tables.t_order.table-strategy.inline.sharding-column=order_id
spring.shardingsphere.sharding.tables.t_order.table-strategy.inline.algorithm-expression=t_order_$->{Math.abs(order_id.hashCode())%2 +1}

# �������� ��������
spring.shardingsphere.sharding.tables.t_order.key-generator.column=order_id
spring.shardingsphere.sharding.tables.t_order.key-generator.type=SNOWFLAKE


mybatis.mapper-locations=classpath:mybatis/*.xml
spring.shardingsphere.props.sql.show=true

logging.level.root=info